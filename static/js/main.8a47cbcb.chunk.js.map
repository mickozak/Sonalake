{"version":3,"sources":["tasks/form-task/FormTaskComplete/FormTaskComplete.js","tasks/form-task/assets/form-goal.png","tasks/form-task/FormTask.js","App.js","serviceWorker.js","index.js"],"names":["FormTaskComplete","FormTask","href","img","target","rel","style","display","width","height","borderRight","padding","src","alt","maxWidth","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wKAEaA,EAAmB,WAC5B,OAAQ,yBCHG,MAA0B,sCCI5BC,EAAW,WACpB,OACI,gCACI,uIAAyG,mBAAGC,KAAMC,EAAKC,OAAO,SAASC,IAAI,sBAAlC,SAAyDF,IAAlK,kDACA,+BACI,gFACA,+GACA,kFAAoD,8CAApD,iDACA,+GACA,6GAGJ,wDACA,+BACI,gGAAkE,6FAAlE,OACA,+EAAiD,gDAAjD,sBAA6F,qFAA7F,OACA,8FACA,yGACA,2FACA,6BAAI,sGACJ,+BAAI,wEAAJ,qIAGJ,uBAEA,8BACI,sBAAKG,MAAO,CAAEC,QAAS,QAAvB,UACI,qBAAKD,MAAO,CAAEE,MAAO,kBAAmBC,OAAQ,IAAKC,YAAa,iBAAkBC,QAAS,IAA7F,SACI,cAAC,EAAD,MAEJ,qBAAKL,MAAO,CAAEE,MAAO,MAAOC,OAAQ,IAAKE,QAAS,IAAlD,SACI,qBAAKC,IAAKT,EAAKU,IAAI,GAAGP,MAAO,CAAEQ,SAAU,qBClBlDC,MAbf,WACI,OACI,qCACI,+EACA,4BAAG,qJAEH,uBAEA,cAAC,EAAD,QCAQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a47cbcb.chunk.js","sourcesContent":["import React from 'react';\n\nexport const FormTaskComplete = () => {\n    return (<div />);\n};\n","export default __webpack_public_path__ + \"static/media/form-goal.27e2fdfa.png\";","import React from 'react';\nimport { FormTaskComplete } from './FormTaskComplete';\nimport img from './assets/form-goal.png';\n\nexport const FormTask = () => {\n    return (\n        <div>\n            <p>For this task you need to implement the form shown in the image below the logic for saving the below (<a href={img} target=\"_blank\" rel=\"noopener noreferrer\">{img}</a>) as well as the following validation rules:</p>\n            <ul>\n                <li>First Name and Last Name are mandatory fields.</li>\n                <li>User Inactivity Date is mandatory ONLY if the User Type is set to \"Inactive\".</li>\n                <li>User Inactivity Date value must have the format <code>YYYY-MM-DD</code> (This format should also be configurable).</li>\n                <li>User Inactivity Date is only valid if it contains a date that is in the past.</li>\n                <li>Validation messages should appear if a field is invalid and was touched.</li>\n            </ul>\n\n            <p>Additional Requirements</p>\n            <ul>\n                <li>The task should be implemented inside the component found at: <code>/src/tasks/form-task/FormTaskComplete/FormTaskComplete.js</code>.</li>\n                <li>When submitting the form, you should use the <code>saveUserForm</code> function found in <code>/src/tasks/form-task/FormTaskComplete/form-api.js</code>.</li>\n                <li>You may create as many sub-components as you deem necessary.</li>\n                <li>When styling the form, feel free to use CSS, SCSS, React-JSS, or other.</li>\n                <li>Feel free to include any UI/UX improvements for the form.</li>\n                <li><strong>Do not use any 3rd party form libraries to complete this task.</strong></li>\n                <li><strong>Testing is required for this task.</strong> The testing-library has been included in this project, but please feel free to use any other testing tools (such as enzyme)</li>\n            </ul>\n\n            <hr />\n\n            <div>\n                <div style={{ display: 'flex' }}>\n                    <div style={{ width: 'calc(50% - 1px)', height: 435, borderRight: '1px solid grey', padding: 10 }}>\n                        <FormTaskComplete />\n                    </div>\n                    <div style={{ width: '50%', height: 435, padding: 10 }}>\n                        <img src={img} alt=\"\" style={{ maxWidth: '100%' }} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\n\nimport { FormTask } from './tasks/form-task/FormTask';\n\nfunction App() {\n    return (\n        <>\n            <h1>Sonalake front-end developer recruitment task</h1>\n            <p><i>If you wish to use TypeScript, you are more than welcome to. You will need to convert the application files to TS.</i></p>\n            \n            <hr/>\n\n            <FormTask />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}